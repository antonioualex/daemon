// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"daemon/domain"
	"sync"
)

type FakeURLRepository struct {
	ExistsStub        func(string, bool) (bool, *domain.URL)
	existsMutex       sync.RWMutex
	existsArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	existsReturns struct {
		result1 bool
		result2 *domain.URL
	}
	existsReturnsOnCall map[int]struct {
		result1 bool
		result2 *domain.URL
	}
	GetStub        func(int, string) ([]*domain.URL, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 int
		arg2 string
	}
	getReturns struct {
		result1 []*domain.URL
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 []*domain.URL
		result2 error
	}
	InsertStub        func(string) error
	insertMutex       sync.RWMutex
	insertArgsForCall []struct {
		arg1 string
	}
	insertReturns struct {
		result1 error
	}
	insertReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeURLRepository) Exists(arg1 string, arg2 bool) (bool, *domain.URL) {
	fake.existsMutex.Lock()
	ret, specificReturn := fake.existsReturnsOnCall[len(fake.existsArgsForCall)]
	fake.existsArgsForCall = append(fake.existsArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	stub := fake.ExistsStub
	fakeReturns := fake.existsReturns
	fake.recordInvocation("Exists", []interface{}{arg1, arg2})
	fake.existsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeURLRepository) ExistsCallCount() int {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return len(fake.existsArgsForCall)
}

func (fake *FakeURLRepository) ExistsCalls(stub func(string, bool) (bool, *domain.URL)) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = stub
}

func (fake *FakeURLRepository) ExistsArgsForCall(i int) (string, bool) {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	argsForCall := fake.existsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeURLRepository) ExistsReturns(result1 bool, result2 *domain.URL) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = nil
	fake.existsReturns = struct {
		result1 bool
		result2 *domain.URL
	}{result1, result2}
}

func (fake *FakeURLRepository) ExistsReturnsOnCall(i int, result1 bool, result2 *domain.URL) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = nil
	if fake.existsReturnsOnCall == nil {
		fake.existsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 *domain.URL
		})
	}
	fake.existsReturnsOnCall[i] = struct {
		result1 bool
		result2 *domain.URL
	}{result1, result2}
}

func (fake *FakeURLRepository) Get(arg1 int, arg2 string) ([]*domain.URL, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeURLRepository) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeURLRepository) GetCalls(stub func(int, string) ([]*domain.URL, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeURLRepository) GetArgsForCall(i int) (int, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeURLRepository) GetReturns(result1 []*domain.URL, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 []*domain.URL
		result2 error
	}{result1, result2}
}

func (fake *FakeURLRepository) GetReturnsOnCall(i int, result1 []*domain.URL, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 []*domain.URL
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 []*domain.URL
		result2 error
	}{result1, result2}
}

func (fake *FakeURLRepository) Insert(arg1 string) error {
	fake.insertMutex.Lock()
	ret, specificReturn := fake.insertReturnsOnCall[len(fake.insertArgsForCall)]
	fake.insertArgsForCall = append(fake.insertArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.InsertStub
	fakeReturns := fake.insertReturns
	fake.recordInvocation("Insert", []interface{}{arg1})
	fake.insertMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeURLRepository) InsertCallCount() int {
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	return len(fake.insertArgsForCall)
}

func (fake *FakeURLRepository) InsertCalls(stub func(string) error) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = stub
}

func (fake *FakeURLRepository) InsertArgsForCall(i int) string {
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	argsForCall := fake.insertArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeURLRepository) InsertReturns(result1 error) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = nil
	fake.insertReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeURLRepository) InsertReturnsOnCall(i int, result1 error) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = nil
	if fake.insertReturnsOnCall == nil {
		fake.insertReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.insertReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeURLRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeURLRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.URLRepository = new(FakeURLRepository)
