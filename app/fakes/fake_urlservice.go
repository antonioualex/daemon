// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"daemon/domain"
	"sync"
)

type FakeURLService struct {
	AddStub        func(string) error
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 string
	}
	addReturns struct {
		result1 error
	}
	addReturnsOnCall map[int]struct {
		result1 error
	}
	CheckUrlsStub        func()
	checkUrlsMutex       sync.RWMutex
	checkUrlsArgsForCall []struct {
	}
	DownloadStub        func(*domain.URL, *domain.BatchInsights)
	downloadMutex       sync.RWMutex
	downloadArgsForCall []struct {
		arg1 *domain.URL
		arg2 *domain.BatchInsights
	}
	GetStub        func(int, string) ([]*domain.URL, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 int
		arg2 string
	}
	getReturns struct {
		result1 []*domain.URL
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 []*domain.URL
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeURLService) Add(arg1 string) error {
	fake.addMutex.Lock()
	ret, specificReturn := fake.addReturnsOnCall[len(fake.addArgsForCall)]
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.AddStub
	fakeReturns := fake.addReturns
	fake.recordInvocation("Add", []interface{}{arg1})
	fake.addMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeURLService) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeURLService) AddCalls(stub func(string) error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *FakeURLService) AddArgsForCall(i int) string {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeURLService) AddReturns(result1 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeURLService) AddReturnsOnCall(i int, result1 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	if fake.addReturnsOnCall == nil {
		fake.addReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeURLService) CheckUrls() {
	fake.checkUrlsMutex.Lock()
	fake.checkUrlsArgsForCall = append(fake.checkUrlsArgsForCall, struct {
	}{})
	stub := fake.CheckUrlsStub
	fake.recordInvocation("CheckUrls", []interface{}{})
	fake.checkUrlsMutex.Unlock()
	if stub != nil {
		fake.CheckUrlsStub()
	}
}

func (fake *FakeURLService) CheckUrlsCallCount() int {
	fake.checkUrlsMutex.RLock()
	defer fake.checkUrlsMutex.RUnlock()
	return len(fake.checkUrlsArgsForCall)
}

func (fake *FakeURLService) CheckUrlsCalls(stub func()) {
	fake.checkUrlsMutex.Lock()
	defer fake.checkUrlsMutex.Unlock()
	fake.CheckUrlsStub = stub
}

func (fake *FakeURLService) Download(arg1 *domain.URL, arg2 *domain.BatchInsights) {
	fake.downloadMutex.Lock()
	fake.downloadArgsForCall = append(fake.downloadArgsForCall, struct {
		arg1 *domain.URL
		arg2 *domain.BatchInsights
	}{arg1, arg2})
	stub := fake.DownloadStub
	fake.recordInvocation("Download", []interface{}{arg1, arg2})
	fake.downloadMutex.Unlock()
	if stub != nil {
		fake.DownloadStub(arg1, arg2)
	}
}

func (fake *FakeURLService) DownloadCallCount() int {
	fake.downloadMutex.RLock()
	defer fake.downloadMutex.RUnlock()
	return len(fake.downloadArgsForCall)
}

func (fake *FakeURLService) DownloadCalls(stub func(*domain.URL, *domain.BatchInsights)) {
	fake.downloadMutex.Lock()
	defer fake.downloadMutex.Unlock()
	fake.DownloadStub = stub
}

func (fake *FakeURLService) DownloadArgsForCall(i int) (*domain.URL, *domain.BatchInsights) {
	fake.downloadMutex.RLock()
	defer fake.downloadMutex.RUnlock()
	argsForCall := fake.downloadArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeURLService) Get(arg1 int, arg2 string) ([]*domain.URL, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeURLService) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeURLService) GetCalls(stub func(int, string) ([]*domain.URL, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeURLService) GetArgsForCall(i int) (int, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeURLService) GetReturns(result1 []*domain.URL, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 []*domain.URL
		result2 error
	}{result1, result2}
}

func (fake *FakeURLService) GetReturnsOnCall(i int, result1 []*domain.URL, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 []*domain.URL
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 []*domain.URL
		result2 error
	}{result1, result2}
}

func (fake *FakeURLService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.checkUrlsMutex.RLock()
	defer fake.checkUrlsMutex.RUnlock()
	fake.downloadMutex.RLock()
	defer fake.downloadMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeURLService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.URLService = new(FakeURLService)
